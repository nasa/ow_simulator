#!/usr/bin/env python3
PACKAGE = "ow_faults_injection"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

joint_state_enum = gen.enum([gen.const("nominal",  int_t, 0, "Joint is functioning normally"),
                             gen.const("free",     int_t, 1, "Joint is freely moving"),
                             gen.const("frozen",   int_t, 2, "Joint is frozen in position"),
                             gen.const("friction", int_t, 3, "Joint is consuming extra power")],
                            "An enum to set joint state")


# ANTENNA FAULTS

ant_faults = gen.add_group("ant_faults")
ant_faults.add("ant_pan_joint_locked_failure",
               bool_t,
               0,
               "Antenna pan encoder failure",
               False)

ant_faults.add("ant_tilt_joint_locked_failure",
               bool_t,
               0,
               "Antenna tilt encoder failure",
               False)

# CAM FAULTS
cam_faults = gen.add_group("cam_faults")

cam_faults.add("camera_left_trigger_failure",
               bool_t,
               0,
               "Camera Left Trigger failure",
               False)


# ARM FAULTS

arm_faults = gen.add_group("arm_faults")
arm_faults.add("shou_yaw_joint_locked_failure",
               bool_t,
               0,
               "Shoulder yaw encoder failure",
               False)

arm_faults.add("shou_pitch_joint_locked_failure",
               bool_t,
               0,
               "Shoulder pitch encoder failure",
               False)

arm_faults.add("prox_pitch_joint_locked_failure",
               bool_t,
               0,
               "Proximal pitch encoder failure",
               False)

arm_faults.add("dist_pitch_joint_locked_failure",
               bool_t,
               0,
               "Distal pitch encoder failure",
               False)

arm_faults.add("hand_yaw_joint_locked_failure",
               bool_t,
               0,
               "Hand yaw encoder failure",
               False)

arm_faults.add("scoop_yaw_joint_locked_failure",
               bool_t,
               0,
               "Scoop yaw encoder failure",
               False)

arm_faults.add("arm_motion_continues_in_fault",
               bool_t,
               0,
               "Arm in motion is not stopped by arm fault",
               False)


# FT Sensor Faults

ft_sensor_faults = gen.add_group("ft_sensor_faults")
ft_sensor_faults.add("enable", bool_t, 0,
    "Distal pitch force torque sensor failures enabled", False)
ft_sensor_faults.add("zero_signal_failure", bool_t, 0,
    "Distal pitch force torque sensor with zero signal failure", False)
ft_sensor_faults.add("signal_bias_failure", double_t, 0,
    "Distal pitch force torque sensor signal bias failure", 0.0, -1.0, 1.0)
ft_sensor_faults.add("signal_noise_failure", double_t, 0,
    "Distal pitch force torque sensor signal increase noise failure", 0.0, 0.0, 1.0)


# POWER FAULTS

power_faults = gen.add_group("power_faults")
power_faults.add("high_power_draw",   double_t, 0,
    "High power draw increment", 1.0, 1.0, 360.0)
power_faults.add("activate_high_power_draw",    bool_t, 0,
    "Activate high power draw at the selected wattage", False)

power_faults.add("custom_fault_profile",   str_t, 0, 
    "Enter the name of a CSV file that has been placed in ow_power_system/profiles", "example_fault.csv")
power_faults.add("activate_custom_fault",   bool_t, 0,
    "Select and activate custom fault CSV", False)

power_faults.add("battery_nodes_to_disconnect",   int_t, 0,
    "Total number of parallel nodes in the battery to disconnect, to simulate an intra-battery fault", 0, 0, 3)
power_faults.add("disconnect_battery_nodes",    bool_t, 0,
    "Disconnect the selected number of battery nodes. Cannot be reversed without restarting the simulation", False)

power_faults.add("low_state_of_charge", bool_t, 0,
    "Artificially force the battery to the low state of charge threshold", False)
power_faults.add("instantaneous_capacity_loss", bool_t, 0,
    "Artificially force the battery to lose enough of its current charge every cycle to trigger an ICL fault", False)
power_faults.add("thermal_failure", bool_t, 0,
    "Artificially force the battery's temperature reading to the thermal failure threshold", False)

exit(gen.generate(PACKAGE, "faults", "Faults"))
