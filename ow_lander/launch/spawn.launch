<?xml version="1.0"?>
<launch>

  <arg name="debug" default="false" />
  <arg name="use_rviz" default="true" />

  <!-- Initial lander pose arguments -->
  <arg name="init_x" default="0" />
  <arg name="init_y" default="0" />
  <arg name="init_z" default="0" />
  <arg name="init_R" default="0" />
  <arg name="init_P" default="0" />
  <arg name="init_Y" default="0" />
  <arg name="freeze_base_link" default="false" />

  <!-- Stowed arm joint positions -->
  <!-- These values should not be duplicated elsewhere, as that would lead to code maintainability problems. -->
  <arg name="stowed_shou_yaw" default="-1.5" />
  <arg name="stowed_shou_pitch" default="1.5708" />
  <arg name="stowed_prox_pitch" default="-2.65" />
  <arg name="stowed_dist_pitch" default="2.9" />
  <arg name="stowed_hand_yaw" default="0.0" />
  <arg name="stowed_scoop_yaw" default="0.0" />
  <arg name="stowed_grinder_yaw" default="0.0" />

  <!-- Make params from stowed arm joint positions so executables can grab them -->
  <param name="stowed_shou_yaw" value="$(arg stowed_shou_yaw)" />
  <param name="stowed_shou_pitch" value="$(arg stowed_shou_pitch)" />
  <param name="stowed_prox_pitch" value="$(arg stowed_prox_pitch)" />
  <param name="stowed_dist_pitch" value="$(arg stowed_dist_pitch)" />
  <param name="stowed_hand_yaw" value="$(arg stowed_hand_yaw)" />
  <param name="stowed_scoop_yaw" value="$(arg stowed_scoop_yaw)" />
  <param name="stowed_grinder_yaw" value="$(arg stowed_grinder_yaw)" />

  <!-- Load lander urdf -->
  <param name="robot_description"
    command="$(find xacro)/xacro '$(find ow_lander)/urdf/lander.xacro'
    freeze_base_link:=$(arg freeze_base_link)"/>

  <!-- Spawn lander in gazebo with the arm in a stowed pose -->
  <!-- -J (initial joint position) must affect joints *and* controllers. Due to
       an underdeveloped part of ROS, controllers will only be initialized with
       these positions if Gazebo is started paused and then we start it here
       with the -unpause flag.
       https://answers.ros.org/question/216420/initial-joint-angles -->
  <node name="lander_model" pkg="gazebo_ros" type="spawn_model" output="screen"
    args="-urdf -param robot_description -model lander
    -x $(arg init_x) -y $(arg init_y) -z $(arg init_z)
    -R $(arg init_R) -P $(arg init_P) -Y $(arg init_Y)
    -J j_shou_yaw $(arg stowed_shou_yaw)
    -J j_shou_pitch $(arg stowed_shou_pitch)
    -J j_prox_pitch $(arg stowed_prox_pitch)
    -J j_dist_pitch $(arg stowed_dist_pitch)
    -J j_hand_yaw $(arg stowed_hand_yaw)
    -J j_scoop_yaw $(arg stowed_scoop_yaw)
    -J j_grinder $(arg stowed_grinder_yaw)
    -unpause" />

  <include file="$(find ow_lander)/launch/ros_controllers.launch"/>

  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <include file="$(find ow_lander)/launch/planning_context.launch">
    <arg name="load_robot_description" value="false"/>
  </include>

  <!-- Convert joint states from Gazebo to tf-tree for rviz -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" >
    <param name="publish_frequency" value="30"/>
  </node>

  <!-- Convert stereo images to point clouds -->
  <!-- disparity_range = (img_width * stereo_baseline) / (estimated_nearest_obj_dist * 2 * tan(hfov / 2)) -->
  <!-- Instead of using above formulaa, disparity_range was determined empirically using dynamic_reconfigure. -->
  <node ns="StereoCamera" name="stereo_proc" pkg="stereo_image_proc" type="stereo_image_proc" respawn="false" output="log">
    <param name="disparity_range" type="int" value="672"/>
  </node>

  <include file="$(find ow_lander)/launch/move_group.launch">
    <arg name="load_robot_description" value="false"/>
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="false"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <include file="$(find ow_lander)/launch/moveit_rviz.launch" if="$(arg use_rviz)">
    <arg name="rviz_config" value="$(find ow_lander)/config/moveit.rviz"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- == launch the services servers ============== -->
  <node pkg="ow_lander" name="path_planning_commander" type="path_planning_commander.py" output="screen"/>
  <node pkg="ow_lander" name="lander_service_server" type="lander_service_server.py" output="screen"/>
  
  <!-- == launch the action servers ============== -->
  <arg name="node_start_delay" default="10.0" />  
  <node pkg="ow_lander" name="ArmActionServers" type="arm_action_servers.py"
    launch-prefix="bash -c 'sleep $(arg node_start_delay); $0 $@' "
    output="screen"/>
  <node pkg="ow_lander" name="AntennaPanTiltAction"
    type="antenna_pan_tilt_action_server.py"
    launch-prefix="bash -c 'sleep $(arg node_start_delay); $0 $@' "
    output="screen"/>
  <node pkg="ow_lander" name="DockIngestSampleAction"
    type="dock_ingest_sample_action_server.py"
    launch-prefix="bash -c 'sleep $(arg node_start_delay); $0 $@' "
    output="screen"/>
  <node pkg="ow_lander" name="LightSetIntensity"
    type="light_set_intensity_action_server.py"
    launch-prefix="bash -c 'sleep $(arg node_start_delay); $0 $@' "
    output="screen"/>
  <node pkg="ow_lander" name="CameraCapture"
    type="camera_capture_action_server.py"
    launch-prefix="bash -c 'sleep $(arg node_start_delay); $0 $@' "
    output="screen"/>
</launch>
